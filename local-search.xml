<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Set和Map基本使用方法</title>
    <link href="/2021/10/09/Set%E5%92%8CMap%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2021/10/09/Set%E5%92%8CMap%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><code>Map</code> <strong>(有道翻译)</strong> v.映射<br>的确，<code>Map</code> 强调的就是<strong>对应关系</strong><br>记住两个<strong>关键点</strong>：</p><ol><li>无序, 但有下标且下标唯一</li><li>键值对</li></ol><h5 id="Map-的基本用法"><a href="#Map-的基本用法" class="headerlink" title="Map 的基本用法"></a>Map 的基本用法</h5><p>（一）创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> m1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br></code></pre></td></tr></table></figure><p>（二）设置 (Map 可不像对象，键只能放字符，Map 的键可以是各种类型的值（包括对象）都可以当作键，如果你需要“键值对”的数据结构，Map 比 Object 更合适。)</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lasso">m1.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;a1&#x27;</span>, <span class="hljs-string">&#x27;帅得乱七八糟&#x27;</span>)<br>m1.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;a2&#x27;</span>, <span class="hljs-string">&#x27;帅得歪瓜裂枣&#x27;</span>)<br>m1.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;a3&#x27;</span>, <span class="hljs-string">&#x27;帅得一塌糊涂&#x27;</span>)<br>m1.<span class="hljs-built_in">set</span>(() =&gt; &#123; console.<span class="hljs-keyword">log</span>(<span class="hljs-string">&#x27;func&#x27;</span>)&#125;, <span class="hljs-string">&#x27;小呆呆能找到女朋友&#x27;</span> )  <span class="hljs-comment">// 错误</span><br><span class="hljs-comment">// 对于除了字符串类型，最好是赋值到一个变量后再放入set里面去</span><br><span class="hljs-keyword">let</span> b = () =&gt; &#123; console.<span class="hljs-keyword">log</span>(<span class="hljs-string">&#x27;func&#x27;</span>)&#125;;<br>m1.<span class="hljs-built_in">set</span>(b, <span class="hljs-string">&#x27;小呆呆能找到女朋友&#x27;</span>)<br></code></pre></td></tr></table></figure><p>（三）获取</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">console.<span class="hljs-built_in">log</span>(m1.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;a2&#x27;</span>));   <span class="hljs-comment"> // 帅得歪瓜裂枣</span><br>console.<span class="hljs-built_in">log</span>(m1.<span class="hljs-built_in">get</span>(b));      <span class="hljs-comment"> // &#x27;小呆呆能找到女朋友&#x27;</span><br></code></pre></td></tr></table></figure><p>（四）判断 —&gt; 只能放入键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">console.<span class="hljs-built_in">log</span>(m1.has(<span class="hljs-string">&#x27;a2&#x27;</span>));         <span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-literal">true</span><br>console.<span class="hljs-built_in">log</span>(m1.has(<span class="hljs-string">&#x27;帅得一塌糊涂&#x27;</span>)); <span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>（五）删除</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">m1.<span class="hljs-keyword">delete</span>(<span class="hljs-string">&#x27;a3&#x27;</span>)<br>console.log(m1.has(<span class="hljs-string">&#x27;a3&#x27;</span>));  <span class="hljs-regexp">//</span> false<br></code></pre></td></tr></table></figure><p>（六）清空</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">m1.<span class="hljs-built_in">clear</span>();<br>console.<span class="hljs-built_in">log</span>(m1)<br></code></pre></td></tr></table></figure><p>（七）键值对个数</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs processing">m1.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;a1&#x27;</span>, <span class="hljs-string">&#x27;帅得乱七八糟&#x27;</span>)<br>m1.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;a2&#x27;</span>, <span class="hljs-string">&#x27;帅得歪瓜裂枣&#x27;</span>)<br>m1.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;a3&#x27;</span>, <span class="hljs-string">&#x27;帅得一塌糊涂&#x27;</span>)<br>console.<span class="hljs-built_in">log</span>(m1.<span class="hljs-built_in">size</span>)   <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p><strong>再次强调！！</strong> <code>Map</code> 比 <code>对象</code>强的地方在于 <code>Map</code> 的下标(键)比<code>对象</code>的键更灵活，可以是任何类型!</p><p>（八）遍历 Map (注意：遍历其实就是迭代)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">m1.<span class="hljs-keyword">forEach</span>((item, <span class="hljs-keyword">index</span>) =&gt; console.log(item, <span class="hljs-keyword">index</span>))   //item只会显示值不会显示键而 <span class="hljs-keyword">index</span> 会显示出键，不会显示值<br></code></pre></td></tr></table></figure><hr><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><blockquote><p>巧记： for…of(遍历数组) for…in(遍历对象)</p></blockquote><p>事实上最好别拿 for…in 来遍历数组(for…of 同理，别拿来遍历对象)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs awk">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr.name = <span class="hljs-string">&#x27;我是谁&#x27;</span>;    <span class="hljs-regexp">//</span> 如果有人脑残，在arr中又以这样的方式增添了属性<br><br><span class="hljs-keyword">for</span> (let key <span class="hljs-keyword">in</span> arr) &#123;<br>  console.log(key);   <span class="hljs-regexp">//</span> 不仅arr下标打印还会把name也遍历了...<br>&#125;<br><br><span class="hljs-keyword">for</span> (let key of arr) &#123;<br>  <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> of 相较于 forEach map 这些方法 能够有中断遍历功能<br>  <span class="hljs-regexp">//</span> <span class="hljs-keyword">break</span>;<br>  console.log(key);   <span class="hljs-regexp">//</span> 会遍历真正的数组元素。name 不会遍历<br>&#125;<br>let obj = &#123;<br>  name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>  sex: <span class="hljs-string">&#x27;男&#x27;</span>,<br>  age: <span class="hljs-number">19</span><br>&#125;<br><br><span class="hljs-regexp">//</span> 遍历对象<br><span class="hljs-keyword">for</span> (let k <span class="hljs-keyword">in</span> obj) &#123;<br>  <span class="hljs-regexp">//</span> 如果是obj.k 以为是obj的k属性。但没有在obj里设置k<br>  <span class="hljs-regexp">//</span> 但要注意：如果是obj[k] k会被当成字符串的属性 例如 obj[<span class="hljs-string">&#x27;key&#x27;</span>]<br>  console.log(k, obj[k]);<br>&#125;<br><br>console.log(obj[<span class="hljs-string">&#x27;name&#x27;</span>]);   <span class="hljs-regexp">//</span> 小明<br></code></pre></td></tr></table></figure><hr><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>**Set 容器(集合)**：无序 不可重复的多个 value 的集合体(不是键值对哦！)<br>理解为特殊数组，元素值不重复</p><p>其实和上面的 Map 的方法一样, 无外乎增删改查</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">// 创建一个空集合</span><br>let set1 = <span class="hljs-keyword">new</span> Set();<br><br><span class="hljs-comment">// 添加元素</span><br>set1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>set1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&#x27;c&#x27;</span>)<br><br>console.<span class="hljs-built_in">log</span>(set1);<br>console.<span class="hljs-built_in">log</span>(set1.has(<span class="hljs-string">&#x27;b&#x27;</span>));  <span class="hljs-comment">// 集合中是否含有 &#x27;b&#x27;</span><br>set1.delete(<span class="hljs-string">&#x27;c&#x27;</span>);    <span class="hljs-comment">// 删除 &#x27;c&#x27;</span><br>set1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>);       <span class="hljs-comment">// 因为重复，所以只保留一个</span><br>console.<span class="hljs-built_in">log</span>(set1);<br>console.<span class="hljs-built_in">log</span>(set1.<span class="hljs-built_in">size</span>);   <span class="hljs-comment">// 元素个数</span><br>set1.<span class="hljs-built_in">clear</span>();        <span class="hljs-comment">// 清空集合</span><br>console.<span class="hljs-built_in">log</span>(set1);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅拷贝和深拷贝</title>
    <link href="/2021/10/08/%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <url>/2021/10/08/%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前置知识：值赋值和引用赋值就不再赘述了, 相对而言挺基础的…</p></blockquote><p>我已知的能够在<code>js</code>里实现<code>拷贝</code>的 3 种现成方法 🧐</p><h4 id="3-种现成的实现拷贝的方法"><a href="#3-种现成的实现拷贝的方法" class="headerlink" title="3 种现成的实现拷贝的方法"></a>3 种现成的实现拷贝的方法</h4><h5 id="1-JSON-大法"><a href="#1-JSON-大法" class="headerlink" title="1. JSON 大法"></a>1. JSON 大法</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> json大法<br>/**<br> * 优点：最简单的实现深拷贝的方式<br> * 缺点：<br> * 支持的数据类型：String<span class="hljs-regexp">/Number/</span>Boolean<span class="hljs-regexp">/Object/</span>Array/null<br> * 不支持的类型： undefined<span class="hljs-regexp">/Symbol/</span>循环引用<span class="hljs-regexp">/函数/</span>Date/RegExp<br> */<br><br> const obj1 = &#123;a: <span class="hljs-number">100</span>, b: &#123;key: <span class="hljs-string">&#x27;123&#x27;</span>&#125;&#125;<br> const obj2 = JSON.parse(JSON.stringify(obj1))<br>console.log(obj1 === obj2) <span class="hljs-regexp">//</span> false<br> 个人评价：事实上，<span class="hljs-number">90</span>%的情况下，上述方法已经够用了，一般不支持的类型这种用得少...<br></code></pre></td></tr></table></figure><h5 id="2-Object-assign-–-gt-浅拷贝"><a href="#2-Object-assign-–-gt-浅拷贝" class="headerlink" title="2.Object.assign() –&gt; 浅拷贝"></a>2.Object.assign() –&gt; 浅拷贝</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj3 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-attr">sorce</span>: [<span class="hljs-number">88</span>, <span class="hljs-number">100</span>]&#125;<br><span class="hljs-keyword">var</span> obj4 = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, obj3)  <span class="hljs-comment">// obj1 与 &#123;&#125; 合并， 内部的引用还是一样的</span><br><span class="hljs-built_in">console</span>.log(obj3 === obj4) <span class="hljs-comment">// false</span><br><br>个人评价： 用法方便简单，但是注意是浅拷贝，在做一些项目的时候，需要有清晰的脑袋知道自己是在做深拷贝还是浅拷贝<br></code></pre></td></tr></table></figure><h5 id="3-Lodash-库"><a href="#3-Lodash-库" class="headerlink" title="3.Lodash 库"></a>3.Lodash 库</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// _.clone     浅拷贝</span><br><span class="hljs-comment">// _.deepclone 深拷贝</span><br><span class="hljs-keyword">var</span> obj5 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-attr">sorce</span>: [<span class="hljs-number">88</span>, <span class="hljs-number">100</span>]&#125;<br><span class="hljs-keyword">var</span> obj6 = _.cloneDeep(obj5);<br><span class="hljs-built_in">console</span>.log(obj5 === obj6)<br><br>个人评价： 不用说，牛逼！<br></code></pre></td></tr></table></figure><hr><h4 id="深拷贝实现"><a href="#深拷贝实现" class="headerlink" title="深拷贝实现"></a>深拷贝实现</h4><h5 id="本套深拷贝实现方法前置知识"><a href="#本套深拷贝实现方法前置知识" class="headerlink" title="本套深拷贝实现方法前置知识"></a>本套深拷贝实现方法前置知识</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> obj1 为一个普通对象<br>let obj1 = &#123;<br> name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br> sex: <span class="hljs-string">&#x27;男&#x27;</span>,<br> age: <span class="hljs-number">18</span>,<br> friends: [<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小玉&#x27;</span>, <span class="hljs-string">&#x27;小萌&#x27;</span>]<br>&#125;<br><br><span class="hljs-regexp">//</span> 创建一个空对象 obj2<br>let obj2 = &#123;&#125;<br><span class="hljs-regexp">//</span> 依次将obj1对象里的属性赋值到obj2里(注意，要判断obj1里的属性是普通类型(值类型)还是引用类型)<br><span class="hljs-regexp">//</span> 值类型 直接复制。如果是引用类型还需要再深层进入引用类型中找到人家的值类型(递归大法)<br>obj2.name = obj1.name   <span class="hljs-regexp">//</span> 是否为普通类型<br>obj2.sex = obj1.sex     <span class="hljs-regexp">//</span> 是否为普通类型<br>obj2.age = obj1.age     <span class="hljs-regexp">//</span> 是否为普通类型<br>obj2.friends = obj1friends <span class="hljs-regexp">//</span> 遍历循环obj1friends。返回新的friends<br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs awk">/**<br> * 数据类型<br> *<br> * typeof <span class="hljs-number">1</span>      <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;number&quot;</span><br> * typeof <span class="hljs-string">&quot;a&quot;</span>    <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;string&quot;</span><br> * typeof true   <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;boolean&quot;</span><br> * typeof &#123;&#125;     <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;object&quot;</span><br> * typeof []     <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;object&quot;</span><br> * typeof null   <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;object&quot;</span>   &lt;---  这里容易产生误会<br> * typeof undefined      <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;undefined&quot;</span><br> * typeof <span class="hljs-keyword">function</span>()&#123;&#125;   <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;function&quot;</span><br> * typeof Symbol()       <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;symbol&quot;</span><br> *<br> *<br> * Object.prototype.toString.call(<span class="hljs-number">1</span>)         <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;[object Number]&#x27;</span><br> * Object.prototype.toString.call(<span class="hljs-string">&#x27;a&#x27;</span>)       <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;[object String]&#x27;</span><br> * Object.prototype.toString.call(true)      <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;[object Boolean]&#x27;</span><br> * Object.prototype.toString.call(&#123;&#125;)        <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;[object Object]&#x27;</span><br> * Object.prototype.toString.call([])        <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;[object Array]&#x27;</span><br> * Object.prototype.toString.call(null)      <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;[object Null]&#x27;</span><br> * Object.prototype.toString.call(<span class="hljs-regexp">/a/</span>)       <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;[object RegExp]&#x27;</span><br> * Object.prototype.toString.call(undefined) <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;[object Undefined]&#x27;</span><br> * Object.prototype.toString.call(<span class="hljs-keyword">function</span>()&#123;&#125;)  <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;[object Function]&#x27;</span><br> * Object.prototype.toString.call(new Date())    <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;[object Date]&#x27;</span><br> */<br></code></pre></td></tr></table></figure><h5 id="开始实现深拷贝"><a href="#开始实现深拷贝" class="headerlink" title="开始实现深拷贝"></a>开始实现深拷贝</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> deepClone = <span class="hljs-function">(<span class="hljs-params">src</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-keyword">type</span> = <span class="hljs-built_in">Object</span>.prototype.toString.call(src).slice(<span class="hljs-number">8</span>, -<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">let</span> dist = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;Number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> src;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;String&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> src;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;Boolean&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> src;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;Object&#x27;</span>) &#123;<br>    dist = &#123;&#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;Array&#x27;</span>) &#123;<br>    dist = []<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;Function&#x27;</span>) &#123;<br>    <span class="hljs-comment">// ... 这个挺有困惑的</span><br>    dist = src.bind(<span class="hljs-built_in">this</span>);   <span class="hljs-comment">// 生成了一个新的函数，this指向的是什么</span><br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> src) &#123;<br>    dist[key] = deepClone(src[key]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> dist;<br>&#125;<br><br><span class="hljs-keyword">let</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;100&#x27;</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;200&#x27;</span>,<br>  <span class="hljs-attr">c</span>: &#123;<span class="hljs-attr">d</span>: <span class="hljs-string">&#x27;300&#x27;</span>, <span class="hljs-attr">e</span>: &#123;<span class="hljs-attr">f</span>: <span class="hljs-string">&#x27;500&#x27;</span>&#125;&#125;,<br>  <span class="hljs-attr">fn</span>: <span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;this is a function&#x27;</span>)&#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> obj2 = deepClone(obj1);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;obj1 === obj2 ?&#x27;</span>, obj1 === obj2);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;obj2&#x27;</span>, obj2);<br><br></code></pre></td></tr></table></figure><head>  ..  <script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  ...</head><body>  ...  <div id="waline"></div>  <script>    Waline({      el: '#waline',       avatar: 'monsterid',      serverURL: 'https://blog-api-9sizcti78-bruce-shuai.vercel.app/',    });  </script></body>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON 基础知识 &amp; Ajax 基础知识</title>
    <link href="/2021/10/08/JSON&amp;Ajax%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/10/08/JSON&amp;Ajax%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h4 id="为什么我们要把对象转化为字符串？"><a href="#为什么我们要把对象转化为字符串？" class="headerlink" title="为什么我们要把对象转化为字符串？"></a>为什么我们要把对象转化为字符串？</h4><ol><li><p>在网页开发的时候，我们需要把<code>对象信息</code>进行长期保存, 因此我们需要把这些信息传递给<code>服务器</code>。所以，需要通过把对象(变量)转化为字符串才能传递给<code>服务器</code>。</p></li><li><p>我们采用的是<code>http协议</code>即超文本传输协议(其本质就是由文本的形式进行传输)</p></li><li><p>JSON 字符串是绝大多数编程语言都支持的…</p></li></ol><h4 id="JSON-字符串的特征"><a href="#JSON-字符串的特征" class="headerlink" title="JSON 字符串的特征"></a>JSON 字符串的特征</h4><ol><li><strong>属性名称</strong>必须加<strong>双引号</strong> (因为人家默认规定的字符串外层是<code>单引号</code>，所以内层必须是<code>双引号</code>)</li><li><strong>属性值</strong>如果是字符串则必须加<strong>双引号</strong></li><li>对象当中的<code>方法(函数)</code>不会被转化为字符串</li></ol><p>(注意： JSON 本质就是字符串！！)</p><h4 id="JSON-和-对象的相互转换："><a href="#JSON-和-对象的相互转换：" class="headerlink" title="JSON 和 对象的相互转换："></a>JSON 和 对象的相互转换：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xiaoming&#x27;</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;boy&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;想吃, 想喝, 想爱&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 把对象转为JSON字符串</span><br><span class="hljs-keyword">let</span> str1 = <span class="hljs-built_in">JSON</span>.stringify(obj);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;obj&#x27;</span>, obj);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;str1&#x27;</span>, str1);   <span class="hljs-comment">// 纯粹的字符串且没有say方法</span><br><br><span class="hljs-comment">// 把数组转为JSON字符串</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">100</span>, &#123;<span class="hljs-attr">key</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">obj</span>: &#123;&#125;, <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;测试&#x27;</span>&#125;]<br><span class="hljs-keyword">let</span> str2 = <span class="hljs-built_in">JSON</span>.stringify(arr);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;arr&#x27;</span>, arr);<br><span class="hljs-comment">// 内部的字符串元素全部被强制转化为双引号,数值不加引号，</span><br><span class="hljs-comment">// 对象元素进行深层改造(加双引号..),而且不再是对象，而是字符串了...</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;str2&#x27;</span>, str2);<br></code></pre></td></tr></table></figure><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-comment">// JSON字符串转成对象</span><br><span class="hljs-comment">// JSON 字符串外层是单引号哦!!</span><br><span class="hljs-built_in">let</span> <span class="hljs-built_in">str</span> = &#x27;&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;&#x27;<br><span class="hljs-built_in">let</span> obj = JSON.parse(<span class="hljs-built_in">str</span>);<br>console.<span class="hljs-built_in">log</span>(&#x27;obj.name&#x27;, obj.name);   <span class="hljs-comment">// 小明</span><br></code></pre></td></tr></table></figure><hr><h4 id="手写-ajax-核心方法"><a href="#手写-ajax-核心方法" class="headerlink" title="手写 ajax 核心方法"></a>手写 ajax 核心方法</h4><p>哈哈, 以不负责任的态度来说 🤪</p><blockquote><p><code>前端</code> 是用来显示数据的<br><code>后端</code> 是用来提供数据的</p></blockquote><p>所以，前端有一个非常重要的工作是向后端索要<code>数据</code>并将数据进行页面显示</p><p>如何向后端索要数据呢？</p><h5 id="书写-ajxa-4-个核心步骤"><a href="#书写-ajxa-4-个核心步骤" class="headerlink" title="书写 ajxa 4 个核心步骤"></a>书写 ajxa 4 个核心步骤</h5><blockquote><p>4 个步骤！但要注意执行顺序哦！</p></blockquote><ol><li>创建一个请求对象, js 提供的构造函数 XMLHttpRequest(分开记忆：XML Http Request)</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">XMLHttpRequest()</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>设置请求的数据得到返回时的处理函数</p><blockquote><p>xhr.onloadend(分开记忆：on load end) –&gt; 执行方式有点类似 onclick 这类函数</p></blockquote></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">xhr.onloadend = <span class="hljs-keyword">function</span>() &#123;<br>  <span class="hljs-regexp">//</span> 该数据全是服务器返回的json字符串<br>  <span class="hljs-regexp">//</span> 请求的数据放在哪了？请求的数据其实放在了请求对象上面<br>  xhr.responseText<br>  <span class="hljs-regexp">//</span> 进行转化<br>  let stus = JSON.parse(xhr.responseText)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>设置请求信息</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">向谁请求：<br>例如 http:<span class="hljs-regexp">//</span>www.jd.com、http:<span class="hljs-regexp">//</span>www.baidu.com<br>xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;https://jsonplaceholder.typicode.com/todos&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="4"><li>发送请求</li></ol><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">xhr.<span class="hljs-built_in">send</span>()<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 整体操作如下：</span><br><br><span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">XMLHttpRequest()</span>;<br>xhr.oploadend = <span class="hljs-keyword">function</span><span class="hljs-literal">()</span> &#123;<br>  <span class="hljs-keyword">let</span> stus = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse(xhr.responseTest)<br>  show<span class="hljs-constructor">Table(<span class="hljs-params">stus</span>)</span><br>&#125;<br>xhr.<span class="hljs-keyword">open</span>(&#x27;get&#x27;, &#x27;https:<span class="hljs-comment">//jsonplaceholder.typicode.com/todos&#x27;);</span><br>xhr.send<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><head>  ..  <script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  ...</head><body>  ...  <div id="waline"></div>  <script>    Waline({      el: '#waline',       avatar: 'monsterid',      serverURL: 'https://blog-api-9sizcti78-bruce-shuai.vercel.app/',    });  </script></body>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一篇文章解决Promise...then，async/await执行顺序类型题</title>
    <link href="/2021/10/08/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E8%A7%A3%E5%86%B3Promise-then%EF%BC%8Casync-await%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E7%B1%BB%E5%9E%8B%E9%A2%98/"/>
    <url>/2021/10/08/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E8%A7%A3%E5%86%B3Promise-then%EF%BC%8Casync-await%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E7%B1%BB%E5%9E%8B%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>最近我在沸点里摸鱼的时候，发现了一些掘友在不约而同的讨论一种类型的题，即 Promise…then, async/await 执行顺序类型的题。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61f40af93cec47d281efaa67db337670~tplv-k3u1fbpfcp-watermark.image" alt="截屏2021-06-10 下午10.18.25.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdb16e753c6742ae94f531022a41d789~tplv-k3u1fbpfcp-watermark.image" alt="截屏2021-06-10 下午10.16.31.png"><br>恰好，在前一段时间我对此种类型的题有所研究 📃。因此，我也想趁这个机会看看是否能把这种类型的题讲述清楚。</p><p>废话就不多说了，先出几道题，大伙试试看，能不能把这几道题做出来！<br>（注：以下题目都是从网上以及掘友发的沸点里获取的）</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">题目一：<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">100</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">200</span>);<br>&#125;)<br><span class="hljs-built_in">Promise</span>.resolve().<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">300</span>);<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">400</span>);<br>求打印结果：<br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">题目二：<br><span class="hljs-built_in">Promise</span>.resolve().<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;error1&#x27;</span>)<br>&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;)<br>求打印结果：<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">题目三：<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 start&#x27;</span>);<br>  <span class="hljs-keyword">await</span> async2();<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 end&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async2&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script start&#x27;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setTimeout&#x27;</span>);<br>&#125;, <span class="hljs-number">0</span>)<br>async1()<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise1&#x27;</span>)<br>  resolve()<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise2&#x27;</span>)<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script end&#x27;</span>)<br>求打印结果：<br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">题目四：<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1&#x27;</span>);<br>  resolve();<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2&#x27;</span>);<br>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3&#x27;</span>);<br>    resolve();<br>  &#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;4&#x27;</span>);<br>  &#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;5&#x27;</span>);<br>  &#125;)<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;6&#x27;</span>);<br>&#125;)<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;7&#x27;</span>);<br>  resolve()<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;8&#x27;</span>);<br>&#125;)<br>求打印结果：<br></code></pre></td></tr></table></figure><p>不知道大家对于上面四道题是否感觉有点恶心？哈哈，如果感到恶心，就对了！跟着这篇文章走，相信大家在文章看完之后能轻松解决上面的几道题！</p><p>废话不多说，如果有兴趣就接着往下看吧！</p><hr><p>首先我们需要知道这类题型实质是在考察以下几个内容</p><ul><li>异步</li><li>event loop 执行机制</li><li>Promise 语法</li><li>async/await 语法</li><li>宏任务、微任务</li></ul><p>其实，掌握了上述的五个内容，无论这类题型怎么变，你都能将题玩于股掌之间(他强任他强，清风拂山岗)。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>由于能开始思考这道题的兄弟，想必还是有一定的 JS 基础。所以我也不再细讲啥是异步、以及 event loop 执行机制了(这类博文网上一抓一大把~)。我只简单分享一下我对于异步的一些感悟：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-number">1</span>、异步是用来解决JS单线程等待这种问题的<br><span class="hljs-number">2</span>、异步是基于回调函数的形式来实现的<br><span class="hljs-number">3</span>、常见的异步有：<span class="hljs-built_in">setTimeout</span>、ajax、<span class="hljs-built_in">Promise</span>……<span class="hljs-keyword">then</span>、<span class="hljs-keyword">async</span>/<span class="hljs-keyword">await</span>、图片加载、网络请求资源<br><span class="hljs-number">4</span>、牢记<span class="hljs-number">5</span>个版块  Call Stack、 Web APIs、 Browser <span class="hljs-built_in">console</span>、 Callback Queue<br>、 micro task queue 这五个版块透露出异步的执行过程<br><span class="hljs-number">5</span>、宏任务是在DOM渲染后触发，微任务是在DOM渲染前触发<br></code></pre></td></tr></table></figure><h3 id="Promise、-Async-await"><a href="#Promise、-Async-await" class="headerlink" title="Promise、 Async/await"></a>Promise、 Async/await</h3><p>很多讲<code>Promise</code>的文章都说过，<code>Promise</code>的出现是为了解决臭名昭著的<code>callback hell</code>。由于异步是基于回调函数的形式来实现的，那么异步就离不开回调函数。但在上古时期，反人类的嵌套回调让老一辈的程序员们苦不堪言…而 Promise 搭配 then 展现的管道式回调函数，让异步更直观、更优雅的展现出来，广受大家好评！</p><p>而<code>async/await</code> 是 ECMAScript 2017 提出的内容。但事实上它们只是<code>Promise</code>的语法糖，但这颗 🍬 贼甜！</p><p>针对<code>Promise</code>以及<code>async/await</code>的骚用法，我想尝试用千层饼的套路来讲讲~</p><h5 id="第一层："><a href="#第一层：" class="headerlink" title="第一层："></a>第一层：</h5><p>Promise 是一个类（函数），接受一个回调函数作为参数，并且这个回调函数的参数也有两个，这两个参数约定俗成被命名为 <code>resolve</code>, <code>reject</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="第二层："><a href="#第二层：" class="headerlink" title="第二层："></a>第二层：</h5><p><code>resolve</code>, <code>reject</code>这两个参数其实也都是函数</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Promise<span class="hljs-comment">((resolve, reject)</span> =&gt; &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-comment">(...)</span> &#123;<br>        resolve<span class="hljs-comment">(...)</span>;     <span class="hljs-comment">// 执行resolve函数</span><br>    &#125; else &#123;<br>        reject<span class="hljs-comment">(...)</span>;      <span class="hljs-comment">// 执行reject函数</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="第三层："><a href="#第三层：" class="headerlink" title="第三层："></a>第三层：</h5><p>对于紧跟 Promise 实例的<code>then</code>，其参数等于<code>resolve</code>接受的参数；紧跟 Promise 实例的<code>catch</code>，其参数等于<code>reject</code>接受的参数。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve)</span> =&gt;</span> &#123;    <span class="hljs-regexp">//</span> p为<span class="hljs-built_in">Promise</span>实例<br>    const a = <span class="hljs-number">100</span>;<br>    resolve(a);<br>&#125;)<br><br>p1.<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(param)</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;param:&#x27;</span>, param);      <span class="hljs-regexp">//</span> param: <span class="hljs-number">100</span><br>&#125;)<br><br>const p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>    const a = <span class="hljs-number">100</span>;<br>    reject(a);<br>&#125;)<br><br>p2.<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">(param)</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;param&#x27;</span>, param);<br>&#125;)<br><br></code></pre></td></tr></table></figure><h5 id="第四层："><a href="#第四层：" class="headerlink" title="第四层："></a>第四层：</h5><p>Promise 的实例有三种状态： <code>pending(加载中)</code>、<code>fulfilled(执行成功)</code>、<code>rejected(执行错误)</code>。其实我们很好理解这三种状态，因为它们恰好对应了<code>异步正在执行</code>和<code>异步执行完的结果</code>(无非成功或失败两种状态)这三种状态</p><p>三种状态的表现：</p><ul><li>pending: Promise 实例处于<code>pending</code>状态时，不会触发 then 和 catch。</li><li>fufilled: Promise 实例处于<code>fulfilled</code>状态时，只会触发 then(不会触发 catch)</li><li>rejected： Promise 实例处于<code>rejected</code>状态时，只会触发 catch(不会触发 then)</li></ul><p>(无论是 then 还是 catch，它们里面都是回调函数)</p><p>那么问题来了，如何判断 Promise 实例对象是处于那种状态呢？</p><p>很简单，看下面代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 啥也没有做~</span><br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;p&#x27;</span>, p);<br></code></pre></td></tr></table></figure><p>Chrome 控制台显示结果如下图：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a40d9c5af8794683b9660bd378bd0316~tplv-k3u1fbpfcp-watermark.image" alt="截屏2021-06-12 下午9.00.33.png"></p><p>截图说明了此时的 Promise 实例是处于<code>pending</code>状态的。其实，当 Promise 内部的回调不执行<code>resolve</code>或<code>reject</code>的时候，Promise 实例就处于<code>pending</code>状态！</p><p>再看下面的代码 👇🏻</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;    <span class="hljs-comment">// p1为Promise实例</span><br>     <span class="hljs-keyword">const</span> a = <span class="hljs-number">100</span>;<br>     resolve(a);<br> &#125;)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;p1&#x27;</span>, p1)    <span class="hljs-comment">// fulfilled</span><br><br> <span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>     <span class="hljs-keyword">const</span> a = <span class="hljs-number">100</span>;<br>     reject(a);<br> &#125;)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;p2&#x27;</span>, p2)    <span class="hljs-comment">// rejected</span><br></code></pre></td></tr></table></figure><p>Chrome 控制台显示结果如下图：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/508e710a9a0847d69cc13e1f79e03ef7~tplv-k3u1fbpfcp-watermark.image" alt="截屏2021-06-12 下午9.03.58.png"></p><p>这里的代码是借用的第三层的代码，其实看到这儿就解释了第三层的套路。对于第一个 Promise 实例执行参数<code>resolve</code>就代表了，当前 Promise 实例对象的状态为<code>fulfilled</code>，因此接下来可以触发 then，以及对应的回调。如果 Promise 实例对象执行了<code>reject</code>，则实例对象的状态变为了 <code>rejected</code>，可以触发 catch~ 有兴趣的小伙伴可以试试，在<code>fulfilled</code>状态执行下 catch 或者在<code>rejected</code>状态下执行下 then，试试能否执行代码成功。</p><h5 id="第五层："><a href="#第五层：" class="headerlink" title="第五层："></a>第五层：</h5><p>在第五层有 3 句至理名言需要知道(不需要去死记硬背，下面我会用例子帮助你理解)</p><blockquote><p>无论是 then 还是 catch 里的回调内容只要代码正常执行或者正常返回，则当前新的 Promise 实例为 fulfilled 状态。如果有报错或返回 Promise.reject()则新的 Promise 实例为 rejected 状态。</p></blockquote><blockquote><p>fulfilled 状态能够触发 then 回调</p></blockquote><blockquote><p>rejected 状态能够触发 catch 回调</p></blockquote><p>举例之前我先补充一个小知识！</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Promise</span>.resolve()  表示一个fulfilled状态的<span class="hljs-built_in">Promise</span>实例<br><span class="hljs-built_in">Promise</span>.reject()   表示一个rejected状态的<span class="hljs-built_in">Promise</span>实例<br></code></pre></td></tr></table></figure><p>好，我将放码过来！</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">题目一：<br><span class="hljs-built_in">Promise</span>.resolve().<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>初看此题，感觉似乎此题有点难度~ 不过，结合我的三句至理名言，我们一起来分析一下此题！！</p><p><code>Promise.resolve()</code> 是一个状态为<code>fulfilled</code>状态的 Promise 实例。<code>fulfilled</code>状态能够触发 then 回调。因此，第一个 then 会被执行，并且能够顺利打印结果而不报错！故 Promise.resolve().then(() =&gt; {console.log(1)}) 这个新的 Promise 实例为<code>fulfilled</code>状态，所以可以触发下一个 then，但是无法触发 catch，故 catch 的内容忽略，从而执行第二个 then 的内容。 所以，此题的打印结果为： 1 3</p><p>好了，下面再来看看第二题(此题也是文章开头出的第二题)：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Promise</span>.resolve().<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;error1&#x27;</span>);<br>&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>有了上一题的经验，做这一道题就轻松很多了~ Promise.resolve()是一个<code>fulfilled</code>状态的实例，所以可以触发 then，而第一个 then 之中有 throw new Error(‘error1’) 这种报错操作，则 Promise.resolve.then(() =&gt; {<br>console.log(1);<br>throw new Error(‘error1’)<br>})就是一个<code>rejected</code>状态的 Promise 实例，所以可以触发 catch，catch 的内容是可以正常执行的，没有报错误，则 Promise.resolve().then(…).catch(…)是一个<code>fulfilled</code>状态的 Promise 实例，可以触发 then，故 then 的内容能够被执行。</p><p>故代码结果为： 1 2 3</p><h5 id="第六层："><a href="#第六层：" class="headerlink" title="第六层："></a>第六层：</h5><p>做了前面两道题，不知道大家有没有一点困惑。感觉我似乎有意回避了 then、catch 的返回值即(return …),而且也没有在 then、catch 里写具体的参数。导致我在第五层的第一句至理名言“无论是 then 或者 catch 里的内容只要正常执行或者正常返回…”也没有完全体现出来。 大家别慌，其实这正是我要讲的第六层套路~</p><p>then、catch 参数的来头其实就是我在第三层套路里就讲过<code>“紧跟Promise实例的then的参数等于resolve接受的参数；紧跟Promise实例的catch的参数等于reject接受的参数。”</code>。如果 then、catch 里的回调，没有写返回内容，则 then 或 catch 后面即将被触发的 then 或 catch 是无法接受到参数的；而如果有返回内容，即 return… 那么无论返回的是普通值还是是 Promise 实例，其实都会对应被转化为 Promise 的实例(Promise.resolve(…)或者 Promise.reject(…))</p><p>结合代码再来理解一下~</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;我想出错&#x27;</span>).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">(err)</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(err);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我不想出错&#x27;</span>;  <span class="hljs-regexp">//</span> 会被自动封装成<span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;我不想出错&#x27;</span>)<br>&#125;).<span class="hljs-keyword">then</span>(data =&gt; &#123;<br>  <span class="hljs-built_in">console</span>.log(data);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;我不想出错&#x27;</span>)<br>&#125;).<span class="hljs-keyword">then</span>(data =&gt; &#123;<br>  <span class="hljs-built_in">console</span>.log(data);<br>&#125;)<br></code></pre></td></tr></table></figure><p>代码打印结果：<br>我想出错<br>我不想出错<br>我不想出错</p><h5 id="第七层："><a href="#第七层：" class="headerlink" title="第七层："></a>第七层：</h5><p>第七层套路，我来谈谈 async/await。 因为 Promise 的出现主要是为了解决异步的回调地狱问题。将噩梦般的嵌套回调变为了优雅的管道式回调。但这始终是逃不掉“回调”二字。而 async/await 虽说只是 Promise 的语法糖，但让你“脱离”了回调，拥抱了同步代码~</p><p>下面我再分享大家五句经典语录~</p><blockquote><p>执行 async 函数，返回的是 Promise 对象</p></blockquote><blockquote><p>await 必须在 async 包裹之下执行</p></blockquote><blockquote><p>await 相当于 Promise 的 then 并且同一作用域下 await 下面的内容全部作为 then 中回调的内容</p></blockquote><blockquote><p>try……catch 可捕获异常，代替了 Promise 的 catch</p></blockquote><blockquote><p>异步中先执行微任务，再执行宏任务</p></blockquote><p>且看下面的代码分析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是async函数&#x27;</span>;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async:&#x27;</span>, fn());<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d97ad91369b344ee8e168444253fa1b0~tplv-k3u1fbpfcp-watermark.image" alt="截屏2021-06-13 下午10.23.56.png"></p><p>这里的 fn() 相当于 Promise.resolve(‘我是 async 函数’)，验证了第一条语录！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;帅得乱七八糟&#x27;</span>);<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> p; <span class="hljs-comment">// await就相当于Promise.then, 故data就是then的参数</span><br>  <span class="hljs-built_in">console</span>.log(data);    <span class="hljs-comment">// 这里的代码为then中回调的内容</span><br>&#125;)()<br></code></pre></td></tr></table></figure><p>上面的这段代码，大家可以试着把<code>async</code>删掉，结果一定会报错！这就验证了第二条语录！上面代码的注释结合第三条语录，大家应该能够体会到<code>await</code>的作用！</p><p>再看下面一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;err&#x27;</span>);<br>  <span class="hljs-comment">// await + try...catch 相当于 Promise.catch</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> p;<br>    <span class="hljs-built_in">console</span>.log(res);<br>  &#125; <span class="hljs-keyword">catch</span>(ex) &#123;  <span class="hljs-comment">// ex 来源于reject()里面的数</span><br>    <span class="hljs-built_in">console</span>.error(ex);<br>  &#125;<br>&#125;)()<br></code></pre></td></tr></table></figure><p>打印结果为 err，验证了第四条语录。</p><p>在此补充一点内容：</p><ul><li>常见的微任务： Promise……then、 async/await</li><li>常见的宏任务： setTimeout、setInterval<blockquote><p>考虑过在文章里谈谈宏任务和微任务的执行机制，但限于篇幅以及本篇文章的侧重点在于解题于是就不过多赘述其他内容了，有兴趣的朋友可以在评论区讨论一下。</p></blockquote></li></ul><p>其实看到这儿，文章开始出的所有题目都能够解决了。不信就试试 💪🏻</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">题目三:<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 start&#x27;</span>);<br>  <span class="hljs-keyword">await</span> async2();<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 end&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async2&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script start&#x27;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setTimeout&#x27;</span>);<br>&#125;, <span class="hljs-number">0</span>)<br>async1()<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise1&#x27;</span>)<br>  resolve()<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise2&#x27;</span>)<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script end&#x27;</span>)<br></code></pre></td></tr></table></figure><p>此题需要注意两个点</p><ol><li>new Promise()内部的回调函数是当成同步函数执行</li><li>执行到 await code 时，会先执行 code，再执行 await</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql">代码分析：<br><span class="hljs-number">1.</span> 先执行同步代码。<br><span class="hljs-number">2.</span> 所以首先执行 console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;script start&#x27;</span>);<br><span class="hljs-number">3.</span> setTimeout为宏任务，先不执行<br><span class="hljs-number">4.</span> 执行async1函数 console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;async1 start&#x27;</span>); 以及 async2(); await由于是Promise.then的语法糖是异步代码，先不执行<br><span class="hljs-number">5.</span> <span class="hljs-keyword">new</span> Promise() 内部代码要执行，后面的<span class="hljs-keyword">then</span>的内容为微任务先不执行<br><span class="hljs-number">6.</span>执行console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;script end&#x27;</span>)<br><span class="hljs-number">7.</span>同步代码执行结束<br><span class="hljs-number">8.</span>开始按代码顺序执行微任务<br><span class="hljs-number">9.</span>先执行 console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;async1 end&#x27;</span>); 前面说过，await下面的代码相当于<span class="hljs-keyword">then</span>里回调的内容<br><span class="hljs-number">10.</span><span class="hljs-keyword">new</span> Promise.then里面的内容 console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;promise2&#x27;</span>)<br><span class="hljs-number">11.</span> 最后执行 宏任务代码，即setTimeout里的内容<br><br>执行结果：<br>script <span class="hljs-keyword">start</span><br>async1 <span class="hljs-keyword">start</span><br>async2<br>promise1<br>script <span class="hljs-keyword">end</span><br>async1 <span class="hljs-keyword">end</span><br>promise2<br>setTimeout<br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">题目四：<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1&#x27;</span>);<br>  resolve();<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2&#x27;</span>);<br>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3&#x27;</span>);<br>    resolve();<br>  &#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;     <span class="hljs-regexp">//</span> 📌<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;4&#x27;</span>);<br>  &#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;5&#x27;</span>);<br>  &#125;)<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;6&#x27;</span>);   <span class="hljs-regexp">//</span> 📌<br>&#125;)<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;7&#x27;</span>);<br>  resolve()<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;8&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql">代码分析：<br><span class="hljs-number">1.</span>先执行同步代码<br><span class="hljs-number">2.</span>setTimeout 为宏任务，先不执行<br><span class="hljs-number">3.</span><span class="hljs-keyword">new</span> Promise里的代码作为同步代码，要执行 console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>); 而<span class="hljs-keyword">then</span>作为微任务，先不执行<br><span class="hljs-number">4.</span>又是一个<span class="hljs-keyword">new</span> Promise,所以和第三步同理。只执行 console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;7&#x27;</span>);<br><span class="hljs-number">5.</span>开始执行异步代码<br><span class="hljs-number">6.</span>执行第一个<span class="hljs-keyword">new</span> Promise里的<span class="hljs-keyword">then</span> 即console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;2&#x27;</span>);以及<span class="hljs-keyword">new</span> Promise的同步代码 console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;3&#x27;</span>);<br><span class="hljs-number">7.</span>这步有点意思，这里不是执行console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;4&#x27;</span>); 而是执行console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;8&#x27;</span>);<br><span class="hljs-number">8.</span>注释为📌的两个<span class="hljs-keyword">then</span>是同层级的，所以按照执行顺序来打印<br><span class="hljs-number">9.</span>执行第三个层级的<span class="hljs-keyword">then</span>，所有微任务代码完成<br><span class="hljs-number">10.</span>执行宏任务代码，即console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br><br>代码结果：<br><span class="hljs-number">1</span><br><span class="hljs-number">7</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">8</span><br><span class="hljs-number">4</span><br><span class="hljs-number">6</span><br><span class="hljs-number">5</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>说有千层饼套路，其实只有 7 层套路，但这每一层套路都是我对于 Promise、async/await 的感悟，有些内容并未细讲，比如微任务、宏任务与 DOM 之间的执行顺序这种相对底层的内容本文并未谈及，毕竟这篇文章的侧重点是在解决 Promise、async/await 执行顺序类型题。本文也可能有内容错误或逻辑错误，也请大家多多包涵，多多指出，谢谢！！</p><p>好了，大功已告成！想必通过这些题，大家已经领悟到了解决此类题型的奥义！</p><head>  ..  <script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  ...</head><body>  ...  <div id="waline"></div>  <script>    Waline({      el: '#waline',       avatar: 'monsterid',      serverURL: 'https://blog-api-9sizcti78-bruce-shuai.vercel.app/',    });  </script></body>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有效括号问题</title>
    <link href="/2021/10/07/%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/07/%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs awk">/**<br> * 题目描述：给定一个只包括<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>的字符串,判断字符串是否有效<br> * <br> * 记住一个规律： 括号成立 意味着 对称性<br> */<br><br><span class="hljs-regexp">//</span> 括号问题，我们一般首选栈来做    ----&gt;   对称性<br><br><span class="hljs-regexp">//</span> 用一个map来维护左括号和右括号的对应关系<br><span class="hljs-regexp">//</span> map 关系真的非常的好用<br><span class="hljs-regexp">//</span> const leftToRight = &#123;<br><span class="hljs-regexp">//</span>   <span class="hljs-string">&quot;(&quot;</span>:<span class="hljs-string">&quot;)&quot;</span>,<br><span class="hljs-regexp">//</span>   <span class="hljs-string">&quot;&#123;&quot;</span>:<span class="hljs-string">&quot;&#125;&quot;</span>,<br><span class="hljs-regexp">//</span>   <span class="hljs-string">&quot;[&quot;</span>:<span class="hljs-string">&quot;]&quot;</span><br><span class="hljs-regexp">//</span> &#125;<br><br><span class="hljs-regexp">//</span> /**<br><span class="hljs-regexp">//</span>  * @param &#123;string&#125; s<br><span class="hljs-regexp">//</span>  * @return &#123;boolean&#125;<br><span class="hljs-regexp">//</span>  */<br><br><span class="hljs-regexp">//</span> <span class="hljs-regexp">//</span> 有些细节 我<br><span class="hljs-regexp">//</span> const isValid = <span class="hljs-keyword">function</span>(s) &#123;<br><span class="hljs-regexp">//</span>   <span class="hljs-regexp">//</span> 结合题意，空字符串无条件判断为 true<br><span class="hljs-regexp">//</span>   <span class="hljs-keyword">if</span> (!s) &#123;<br><span class="hljs-regexp">//</span>     return true;<br><span class="hljs-regexp">//</span>   &#125;<br><span class="hljs-regexp">//</span>   <span class="hljs-regexp">//</span> 初始化 stack 数组<br><span class="hljs-regexp">//</span>   const stack = [];<br><span class="hljs-regexp">//</span>   <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br><span class="hljs-regexp">//</span>     <span class="hljs-keyword">if</span> (s[i] === <span class="hljs-string">&#x27;(&#x27;</span> || s[i] === <span class="hljs-string">&#x27;&#123;&#x27;</span> || s[i] === <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br><span class="hljs-regexp">//</span>       stack.push(leftToRight[s[i]])<br><span class="hljs-regexp">//</span>     &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-regexp">//</span>       <span class="hljs-regexp">//</span> 但是人家写的是!stack.length || stack.pop() !== ch  好奇怪...<br><span class="hljs-regexp">//</span>       <span class="hljs-keyword">if</span> (stack.pop() !== s[i]) &#123;<br><span class="hljs-regexp">//</span>         return false;<br><span class="hljs-regexp">//</span>       &#125;<br><span class="hljs-regexp">//</span>     &#125;<br><span class="hljs-regexp">//</span>   &#125;<br><span class="hljs-regexp">//</span>   <span class="hljs-regexp">//</span> 若所有的括号都能配对成功，那么最后栈应该是空的<br><span class="hljs-regexp">//</span>   <span class="hljs-regexp">//</span> return !stack.length;<br><br><span class="hljs-regexp">//</span>   return true;<br><span class="hljs-regexp">//</span> &#125;<br><br><br><br><span class="hljs-regexp">//</span> 注意： ))))(((( 这种是错误的。左括号必须以正确的顺序闭合<br><br><span class="hljs-regexp">//</span> 对象映射大法 ----&gt;  注意！变量名千万搞错不能出错, 有时要好好检查检查自己的变量名...<br>const leftToRight = &#123;<br>  <span class="hljs-string">&quot;&#123;&quot;</span>:<span class="hljs-string">&quot;&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;(&quot;</span>:<span class="hljs-string">&quot;)&quot;</span>,<br>  <span class="hljs-string">&quot;[&quot;</span>:<span class="hljs-string">&quot;]&quot;</span><br>&#125;<br><br><br><span class="hljs-regexp">//</span> 我自己想到一个方法。设置两个栈。一个栈放入左侧符号的映射。  一个栈放入右侧符号。 两个栈进行一一对比<br>const isValid = (str) =&gt; &#123;<br>  const stack = [];<br>  <span class="hljs-regexp">//</span> 数组缓存<br>  let len = str.length;<br><br>  <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">if</span> (str[i] === <span class="hljs-string">&#x27;&#123;&#x27;</span> || str[i] === <span class="hljs-string">&#x27;[&#x27;</span> || str[i] === <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>      stack.push(leftToRight[str[i]]);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stack.length !== <span class="hljs-number">0</span> &amp;&amp; str[i] === stack[stack.length - <span class="hljs-number">1</span>]) &#123;<br>      stack.pop();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stack.length === <span class="hljs-number">0</span>) &#123;<br>      return false;<br>    &#125;<br>  &#125;<br>  return stack.length === <span class="hljs-number">0</span>;<br>&#125;<br><br>console.log(<span class="hljs-string">&#x27;test&#x27;</span>, isValid(<span class="hljs-string">&#x27;()[]&#123;&#125;&#x27;</span>));<br></code></pre></td></tr></table></figure><head>  ..  <script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  ...</head><body>  ...  <div id="waline"></div>  <script>    Waline({      el: '#waline',       avatar: 'monsterid',      serverURL: 'https://blog-api-9sizcti78-bruce-shuai.vercel.app/',    });  </script></body>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>栈类相关问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开始我的个人博客之旅啦</title>
    <link href="/2021/10/07/%E5%BC%80%E5%A7%8B%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85%E5%95%A6/"/>
    <url>/2021/10/07/%E5%BC%80%E5%A7%8B%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85%E5%95%A6/</url>
    
    <content type="html"><![CDATA[<p>这篇博客只是用来测试一下网站 哈哈哈<br>祝福看见这篇博客的你 永远快乐哦!</p><head>  ..  <script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  ...</head><body>  ...  <div id="waline"></div>  <script>    Waline({      el: '#waline',      serverURL: 'https://blog-api-9sizcti78-bruce-shuai.vercel.app/',    });  </script></body>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/06/hello-world/"/>
    <url>/2021/10/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
